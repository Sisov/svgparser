% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/svg-parse.R
\name{read_svg}
\alias{read_svg}
\title{Read an svg file (or text) into a \code{grid::grobTree} object or \code{data.frame}}
\usage{
read_svg(
  svg_file,
  xoffset = 0,
  yoffset = 0,
  npoints = 30,
  scale = 1,
  default.units = "snpc",
  stroke_scale = 1,
  font_scale = 1,
  style_default = list(),
  user_css = NULL,
  obj_type = c("grob", "data.frame", "list", "debug"),
  false_colour = NULL
)
}
\arguments{
\item{svg_file}{either a filename, or a single character string containing all the text of
an SVG.  Filenames may either be \code{'.svg'} or \code{'.svgz'} (gzip
compressed SVG)}

\item{xoffset, yoffset}{Extra offsets to element coordinates applied in the
grob coordinate system (not the SVG coordinate system). Default: (0, 0)}

\item{npoints}{number of segmentation points per section of bezier, arc,
circle or ellipse. Default 30
Increase this number if the curves look too jaggy for your use case.}

\item{scale}{Scale factor to apply to all coordinates. Default: 1.}

\item{default.units}{the grid units to use throughout. The default (\code{'snpc'})
is a pretty safe bet that will give you an auto-resizing vector object.
Uou could also set it to an \emph{absolute}
unit (like \code{'mm'}) and then play with the \code{scale} argument
to get a fixed size grid object.}

\item{stroke_scale}{Default: 1.  Multiplication factor for width of strokes.
The value to use here is heavily dependent upon what size output
you are rendering to.}

\item{font_scale}{extra scaling applied to font parameters. Default: 1.
The value to use here is heavily dependent upon the output size
you are rendering to.}

\item{style_default}{a named list of CSS properties which should override
the defaults.  default: \code{list()}.  E.g. set \code{style_default =
list(fill = 'red')} to set the default fill style for all elements
to 'red'. This style will still be overridden by inline styles, css styles,
or presentation attributes. It is a useful way of setting the 'color'
property which is often used in SVG icon sets (which make heavy use of
the 'currentColor' property)}

\item{user_css}{single string containing CSS text e.g. "circle \{ fill: red !important; \}".
Note: Normal cascading style rules apply i.e. more specific rules override
those with lower specificity, and inline style specifications have the highest specificty.
You may need to use \code{!important} to override styles consistently.}

\item{obj_type}{What kind of R object to return - choices
       \code{c('grob', 'data.frame', 'list', 'debug')}. Default: 'grob'.

       The 'list' and 'data.frame' options are for advanced/debugging use,
       but some users may find them useful if trying to extract coordinate
       information etc.

       The \code{data.frame} option could be used to recreate much of the SVG
       but it is missing key information such as clipping paths, and gradients
       (as these are pretty difficult to capture nicely in a data.frame).

       The \code{debug} option returns all the possible information. Currently
       this returned object is undocumented. Use at your peril!

       The \code{list} option returns a list containing the following elements
      for each parsed SVG element
       \itemize{
         \item{svg - the SVG string for this element}
         \item{tag - the SVG tag e.g. "path", "circle"}
         \item{svg_df - data.frame of coordinates in SVG coordinate system}
         \item{transform - the transform matrix for this element}
         \item{grid_df - the transformed coordinates in R/grid coordinate space}
         \item{style - caclculated style for this element. Named list of sttyle attributes}
         \item{gp - the \code{gpar()} equivalent of the style}
         \item{grob - the final generated grob for this element}
       }}

\item{false_colour}{Use false colouring on all elements, by selecting random
colours from palettes in \code{grDevices}
Default: NULL means to use actual colours.
Possible values: 'rainbow', 'hcl', 'heat',
'terrain', 'topo', 'cm'}
}
\value{
Return type determined by \code{obj_type} argument
}
\description{
Read an svg file (or text) into a \code{grid::grobTree} object or \code{data.frame}
}
